/*
Author: Shengrui Zhang
Student ID: 23426900
Email: shengruizhang@email.arizona.edu
Created Date: 10/20/17
*/
/*  PLAYING THE CONNECTING FOUR GAME /*/

/*////////////////////////////////////// PROBLEM ONE /////////////////////////////////////*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdbool.h>

#define ROW 6
#define COL 7
#define INT 8

typedef unsigned int uint;                // DEFINE
typedef unsigned char uchar;

typedef struct CURRENT_ROW {
	int r_0;
	int r_1;
	int r_2;
	int r_3;
	int r_4;
	int r_5;
	int r_6;
} CURRENT_ROW;

void INIT_BOARD(uint BOARD[][COL], uint tr);
void PRINT_BOARD(uint BOARD[][COL]);
//void BOARD_CHECK(uchar BOARD[][COL]);
bool COLUMN_FULL(uchar BOARD[][COL], uint column);


/*///////////////////////////////// MAIN FUNCTION //////////////////////*/
int main(void)
{
	//printf("Let's play Connect Four in a Line\n\n");
	bool FULL = false;
	
	uint round = 1;                       // ROUND VARI, DETERMINE WHOSE ROUNDM, GAME STARTS W/ PLYER 1
	uint symbol = 1;                      // IDENTIFY WHOSE ROUND
	uint result = 0;                      // 0 FOR NOTHING, 1 FOR TIE, 2 FOR PLAYER ONE WON, 3 FOR TWO

	uchar col_i = '\0';                   // INPUT LETTER VARI, WHERE THE PLACE IS PUT
	uchar togo = 'y';                    // IF IT IS N, QUIT THE GAME, VICE VERSA FOR Y
	
	CURRENT_ROW c_r;                      // TRACK THE CURRENT ROW
	c_r.r_0 = 0;                          // STARTS FROM ROW 0
	c_r.r_1 = 0;
	c_r.r_2 = 0;
	c_r.r_3 = 0;
	c_r.r_4 = 0;
	c_r.r_5 = 0;
	c_r.r_6 = 0;
	
	uint temp = 0;
	
	/* DEF BOARD, USE NUMBER DIGIT TO REPRESENT XS AND OS, 1 FOR X, 2 FOR O*/
	uint board[ROW][COL];

	/*//////////// CONTINUE THE GAME FOR Y, QUIZ FOR N ///////////////*/
	while (togo != 'n' && togo != 'N')
	{
		/*///// RESET VALUES ////*/
		round = 1;
		symbol = 0;
		
		/* INITIATE EVERYTHING TO A NON 1,0 NUMBER */
		INIT_BOARD(board, INT);

		printf("Let's play Connect Four in a Line\n\n");
		//goto test;                     // TEST FOR ENDING THE LOOP

		/*///////////// GAME STARTS, LOOPING: CONDITION: RESULT, FALSE FOR GOON, TRUE FOR BREAK THE LOOP ////////////////////*/
		while (result == 0)
		{
			/*///////// PRINTING THE BOARD ////////////////*/
			PRINT_BOARD(board);

			/*//////// TAKE AND CHECK INPUT /////////////*/
			while (symbol != 1 && symbol != 2)         // SYMBOL 1 OR 2 FOR A VALID INPUT, VICE VERSA
			{
				printf("\n");

				/*///// DETERMINE WHOSE ROUND, 1 FOR PLAYER 1, 2 FOR 2 //////*/
				if (round == 1) {
					printf("Player 1: Which column would you like to add an 'X'? ");
				}
				else if (round == 2) {
					printf("Player 2: Which column would you like to add an 'O'? ");
				}

				scanf(" %c", &col_i);    // TAKE INPUT

				/*//////// CHECK THE INPUT /////////////*/
				if (round == 1 && col_i >= 65 && col_i <= 71) {           // ROUND FOR PLAYER 1, INPUT LETTER WAS CAP
					symbol = 1;
					temp = col_i - 65;   // TRANSLATE TO NUMBER
					round = 2;           // SWAP PLAYER
				}
				else if (round == 1 && col_i >= 97 && col_i <= 103) {     // ROUND FOR PLAYER 1, INPUT LETTER WAS LOWER
					symbol = 1;
					temp = col_i - 97;   // TRANSLATE TO NUMBER
					round = 2;           // SWAP PLAYER
				}
				else if (round == 2 && col_i >= 65 && col_i <= 71) {      // ROUND FOR PLAYER 2, INPUT LETTER WAS CAP
					symbol = 2;
					temp = col_i - 65;   // TRANSLATE TO NUMBER
					round = 1;           // SWAP PLAYER
				}
				else if (round == 2 && col_i >= 97 && col_i <= 103) {     // ROUND FOR PLAYER 2, INPUT LETTER WAS LOWER
					symbol = 2;
					temp = col_i - 97;   // TRANSLATE TO NUMBER
					round = 1;           // SWAP PLAYER
				}
				else {
					symbol = 0;
					printf("Invalid Entry\n");
				}
			}

			/*/////////// UPDATE BOARD ///////////*/
			FULL = COLUMN_FULL(board, temp);

			if (FULL == false)    // THAT COLUMN IS NOT FULL YET
			{
				switch (temp)
				{
				case 0:
					board[c_r.r_0][temp] = symbol;
					++c_r.r_0;
					break;
	
				case 1:
					board[c_r.r_1][temp] = symbol;
					++c_r.r_1;
					break;
	
				case 2:
					board[c_r.r_2][temp] = symbol;
					++c_r.r_2;
					break;
	
				case 3:
					board[c_r.r_3][temp] = symbol;
					++c_r.r_3;
					break;
	
				case 4:
					board[c_r.r_4][temp] = symbol;
					++c_r.r_4;
					break;
	
				case 5:
					board[c_r.r_5][temp] = symbol;
					++c_r.r_5;
					break;
	
				case 6:
					board[c_r.r_6][temp] = symbol;
					++c_r.r_6;
					break;
				}
			}
			else                  // THAT COLUMN IS FULL
			{
				printf("That column is full\n");
			}

			symbol = 0;
			
			/*///////////// CHECK THE BOARD FOR TIES OR WINS ///////////////*/
			
			
			
			
		}
		
		/*///////////////////// TERMINATED GAME, SHOW RESULT FOR TIE WINS //////////////*/
		if (result == 1)                // TIED
		{
			printf("TIE GAME. You should try again\n");
		}
		else if (result == 2)           // PLAYER ONE WINS
		{
			printf("Player 1 is a WINNER\n");
			printf("Player 2 is a LOSER\n");
		}
		else if (result == 3)
		{
			printf("Player 2 is a LOSER\n");
			printf("Player 1 is a WINNER\n");			
		}
			
		//test:                         // TEST FOR ENDING THE LOOP
		/*////////// ASK FOR ANOTHER GAME ///////////*/
		togo = '\0';
		while (togo != 78 && togo != 110 && togo != 89 && togo != 121)
		{
			printf("Do you want to play again (y/n)? ");
			scanf(" %c", &togo);
		}

		
	
	}
	
	printf("Goodbye\n");
	return 0;
}


/*///////////////////////////// INITIATE THE BOARD TO A NUMBER //////////////////////////*/
void INIT_BOARD(uint BOARD[][COL], uint tr)
{
	for (int r = 0; r < ROW; ++r) {
		for (int c = 0; c < COL; ++c) {
			BOARD[r][c] = tr;
		}
	}
}


/*///////////////////////////// PRINTING THE BOARD //////////////////////*/
void PRINT_BOARD(uint BOARD[][COL]) 
{
	printf("\n");
	printf("  A   B   C   D   E   F   G\n");
	printf("|---|---|---|---|---|---|---|\n");
	
	for (int t = (ROW - 1); t >= 0; --t)
	{
		/*/////// PRINT THE CHARS //////
		1 FOR X, 2 FOR O
		*/
		for (int c = 0; c < COL; ++c) {
			if (BOARD[t][c] == 1) {
				printf("| X ");
			}
			else if (BOARD[t][c] == 2) {
				printf("| O ");
			}
			else if (BOARD[t][c] != 0 && BOARD[t][c] != 1) {
				printf("|   ");
			}
			//printf("%d ", BOARD[t][c]);         // for dubugging
		}
		printf("|\n");
		printf("|---|---|---|---|---|---|---|\n");
	}
}


/*/////////////////////////////// CHECKING THE BOARD ///////////////////////////////*/
void BOARD_CHECK(uint BOARD[][COL], bool *ending, uint *result)
{
	
}


/*////////////////////////////// CHECK IF THE COLUMN IS FULL ///////////////*/
bool COLUMN_FULL(uint BOARD[][COL], uint column)
{
	bool full = false;
	
	if (BOARD[ROW - 1][column] != INT)
	{
		full = true;
	}
	return(full);
}

/*///////////////// DEBUGGING ////////////////*/
	/*for (int i = (ROW - 1); i >= 0; --i) {
		for (int j = 0; j < COL; ++j) {
			printf("%d ", BOARD[i][j]);
		}
		printf("\n");
	}*/